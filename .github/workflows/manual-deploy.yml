name: Manual Production Deployment

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''
      image_tag:
        description: 'Image tag to deploy (default: latest from master)'
        required: false
        default: 'latest'

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deployment == 'deploy'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Determine image tags
      id: images
      run: |
        REPO_PATH="ghcr.io/${{ github.repository }}"
        REPO_PATH_LC=$(echo "$REPO_PATH" | tr '[:upper:]' '[:lower:]')
        if [ "${{ github.event.inputs.image_tag }}" = "latest" ]; then
          echo "frontend-image=$REPO_PATH_LC/landing-frontend:latest" >> $GITHUB_OUTPUT
          echo "backend-image=$REPO_PATH_LC/landing-backend:latest" >> $GITHUB_OUTPUT
        else
          echo "frontend-image=$REPO_PATH_LC/landing-frontend:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          echo "backend-image=$REPO_PATH_LC/landing-backend:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        FRONTEND_IMAGE: ${{ steps.images.outputs.frontend-image }}
        BACKEND_IMAGE: ${{ steps.images.outputs.backend-image }}
      run: |
        echo "🚀 Deploying to production..."
        echo "Frontend: $FRONTEND_IMAGE"
        echo "Backend: $BACKEND_IMAGE"
        
        # Upload template file and nginx config
        sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no docker-compose.prod.template.yml nginx.prod.conf $DEPLOY_USER@$DEPLOY_HOST:/opt/zen-landing/
        
        # Execute production deployment
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
          cd /opt/zen-landing
          
          # Login to GitHub Container Registry
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin
          
          # Pull new images
          docker pull '$FRONTEND_IMAGE'
          docker pull '$BACKEND_IMAGE'
          
          # Update docker-compose with new images and admin credentials
          sed \"s|\\\${BACKEND_IMAGE:-zen-landing-backend:latest}|$BACKEND_IMAGE|g; s|\\\${FRONTEND_IMAGE:-zen-landing-frontend:latest}|$FRONTEND_IMAGE|g\" docker-compose.prod.template.yml > docker-compose.prod.yml
          
          # Set admin credentials from GitHub secrets
          export ADMIN_USERNAME='${{ secrets.ADMIN_USERNAME }}'
          export ADMIN_PASSWORD='${{ secrets.ADMIN_PASSWORD }}'
          
          # Deploy with proper container recreation
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml pull backend frontend || true
          docker-compose -f docker-compose.prod.yml up -d --force-recreate backend frontend
          
          # Verify nginx config was updated
          echo '📋 Verifying nginx config update...'
          if docker exec zen-landing-frontend nginx -t; then
            echo '✅ Nginx config is valid'
          else
            echo '❌ Nginx config validation failed'
            exit 1
          fi
          
          # Wait for services to be ready
          sleep 10
          
          # Verify both HTTP and HTTPS ports are working
          echo '🔍 Verifying HTTP (80) and HTTPS (443) ports...'
          if netstat -tlnp | grep -E ':80.*LISTEN' && netstat -tlnp | grep -E ':443.*LISTEN'; then
            echo '✅ Both HTTP and HTTPS ports are properly exposed'
          else
            echo '❌ Port binding issue detected! Retrying with manual container restart...'
            docker stop zen-landing-frontend || true
            docker rm zen-landing-frontend || true
            docker-compose -f docker-compose.prod.yml up -d frontend
            sleep 5
          fi
          
          # Note: External monitoring is handled by UptimeRobot
          echo '✅ Deployment completed - UptimeRobot handles external monitoring'
          
          # Cleanup old images
          docker image prune -f
        "

    - name: Verify deployment
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      run: |
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Check if site is accessible via both HTTP and HTTPS
        echo "🔍 Testing HTTP access..."
        if curl -f -s http://$DEPLOY_HOST/ > /dev/null; then
          echo "✅ HTTP (port 80) is working"
          HTTP_OK=true
        else
          echo "❌ HTTP (port 80) failed"
          HTTP_OK=false
        fi
        
        echo "🔍 Testing HTTPS access..."
        if curl -f -s -k https://$DEPLOY_HOST/ > /dev/null; then
          echo "✅ HTTPS (port 443) is working"
          HTTPS_OK=true
        else
          echo "❌ HTTPS (port 443) failed"
          HTTPS_OK=false
        fi
        
        # Test Android-specific timeout fix
        echo "🤖 Testing Android user agent response..."
        ANDROID_UA="Mozilla/5.0 (Linux; Android 13; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36"
        if curl -f -s -A "$ANDROID_UA" --max-time 10 https://$DEPLOY_HOST/ > /dev/null; then
          echo "✅ Android user agent test passed"
          ANDROID_OK=true
        else
          echo "⚠️  Android user agent test failed (may improve after warm-up)"
          ANDROID_OK=false
        fi
        
        if [ "$HTTP_OK" = true ] && [ "$HTTPS_OK" = true ]; then
          echo "✅ Production deployment verified successfully"
          echo "🌐 Site available at: http://$DEPLOY_HOST and https://$DEPLOY_HOST"
          if [ "$ANDROID_OK" = true ]; then
            echo "🤖 Android compatibility: OK"
          else
            echo "🤖 Android compatibility: Needs warm-up (keep-alive will resolve this)"
          fi
        else
          echo "❌ Production deployment verification failed"
          echo "HTTP Status: $HTTP_OK | HTTPS Status: $HTTPS_OK | Android Status: $ANDROID_OK"
          exit 1
        fi

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ${{ steps.images.outputs.frontend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: ${{ steps.images.outputs.backend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Nginx Config**: Updated from repository" >> $GITHUB_STEP_SUMMARY
        echo "- **External Monitoring**: UptimeRobot active" >> $GITHUB_STEP_SUMMARY
        echo "- **Android Fix**: Timeout optimizations applied" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Production deployment completed successfully**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Production deployment failed**" >> $GITHUB_STEP_SUMMARY
        fi 