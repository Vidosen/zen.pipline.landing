name: Manual Production Deployment

on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''
      image_tag:
        description: 'Image tag to deploy (default: latest from master)'
        required: false
        default: 'latest'

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deployment == 'deploy'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: Determine image tags
      id: images
      run: |
        if [ "${{ github.event.inputs.image_tag }}" = "latest" ]; then
          echo "frontend-image=ghcr.io/${{ github.repository }}/landing-frontend:latest" >> $GITHUB_OUTPUT
          echo "backend-image=ghcr.io/${{ github.repository }}/landing-backend:latest" >> $GITHUB_OUTPUT
        else
          echo "frontend-image=ghcr.io/${{ github.repository }}/landing-frontend:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          echo "backend-image=ghcr.io/${{ github.repository }}/landing-backend:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        FRONTEND_IMAGE: ${{ steps.images.outputs.frontend-image }}
        BACKEND_IMAGE: ${{ steps.images.outputs.backend-image }}
      run: |
        echo "🚀 Deploying to production..."
        echo "Frontend: $FRONTEND_IMAGE"
        echo "Backend: $BACKEND_IMAGE"
        
        # Upload template file and execute production deployment
        sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no docker-compose.prod.template.yml $DEPLOY_USER@$DEPLOY_HOST:/opt/zen-landing/
        
        # Execute production deployment
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
          cd /opt/zen-landing
          
          # Login to GitHub Container Registry
          echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin
          
          # Pull new images
          docker pull '$FRONTEND_IMAGE'
          docker pull '$BACKEND_IMAGE'
          
          # Update docker-compose with new images
          sed \"s|\\\${BACKEND_IMAGE:-zen-landing-backend:latest}|$BACKEND_IMAGE|g; s|\\\${FRONTEND_IMAGE:-zen-landing-frontend:latest}|$FRONTEND_IMAGE|g\" docker-compose.prod.template.yml > docker-compose.prod.yml
          
          # Deploy with zero downtime (force recreate)
          docker-compose -f docker-compose.prod.yml up -d --force-recreate
          
          # Cleanup old images
          docker image prune -f
        "

    - name: Verify deployment
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      run: |
        echo "⏳ Waiting for services to be ready..."
        sleep 30
        
        # Check if site is accessible
        if curl -f -s http://$DEPLOY_HOST/; then
          echo "✅ Production deployment verified successfully"
          echo "🌐 Site available at: http://$DEPLOY_HOST"
        else
          echo "❌ Production deployment verification failed"
          exit 1
        fi

    - name: Deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image**: ${{ steps.images.outputs.frontend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image**: ${{ steps.images.outputs.backend-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Production deployment completed successfully**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Production deployment failed**" >> $GITHUB_STEP_SUMMARY
        fi 